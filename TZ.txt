%%
%
Flags: # 0 - + space bonuses: * $ L '
	# : adds 0 for o, adds 0x for x, . for a, A, e etc, and adds trailing zeros for g and G
	0 : changes all padding zeros to spaces
	- : changes the position of the padding to the right rather then to the left
	space : a blank space should be of the levt before a positive number
	+ : adds a sign to a number, overrides space
	* : instead of getting precision and/or with from the input string it gets it from the next
		int value, negative width means - flag with following widht, negative precision is treated as though it was missing.
	$ : digit followed by a $ specifies the next arg to access(it's number). Arguments r starting at 1
	L : ?
	' : theoretically adds commas every 3 symbols for decimal conversions and for integral portion for floating conversions.
		like 123,456,789
Width
	If the converted value has fewer characters than the field width, it will be padded
         with spaces on the left (or right, if the left-adjustment flag has been given) to fill out the field width.
Precision
	An optional precision, in the form of a period . followed by an optional digit string.  If the digit string is omitted, the precision is taken as zero.
         This gives the minimum number of digits to appear for d, i, o, u, x, and X conversions, the number of digits to appear after the decimal-point for a, A,
         e, E, f, and F conversions, the maximum number of significant digits for g and G conversions, or the maximum number of characters to be printed from a
         string for s conversions.
Modifiers: hh h l ll j z
	         Modifier          d, i           o, u, x, X            n
         hh                signed char    unsigned char         signed char *
         h                 short          unsigned short        short *
         l (ell)           long           unsigned long         long *
         ll (ell ell)      long long      unsigned long long    long long *
         j                 intmax_t       uintmax_t             intmax_t *
         t                 ptrdiff_t      (see note)            ptrdiff_t *
         z                 (see note)     size_t                (see note)
         q (deprecated)    quad_t         u_quad_t              quad_t *
Format: sSpdDioOuUxXcC bonuses: eE fF gG aA n b r k
    S       Treated as s with the l (ell) modifier.

    s       The char * argument is expected to be a pointer to an array of character type (pointer to a string).  Characters from the array are written up to
            (but not including) a terminating NUL character; if a precision is specified, no more than the number specified are written.  If a precision is
            given, no null character need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a ter-
            minating NUL character.
			
            If the l (ell) modifier is used, the wchar_t * argument is expected to be a pointer to an array of wide characters (pointer to a wide string).  For
            each wide character in the string, the (potentially multi-byte) sequence representing the wide character is written, including any shift sequences.
            If any shift sequence is used, the shift state is also restored to the original state after the string.  Wide characters from the array are written
            up to (but not including) a terminating wide NUL character; if a precision is specified, no more than the number of bytes specified are written
            (including shift sequences).  Partial characters are never written.  If a precision is given, no null character need be present; if the precision is
            not specified, or is greater than the number of bytes required to render the multibyte representation of the string, the array must contain a termi-
            nating wide NUL character.

    p       The void * pointer argument is printed in hexadecimal (as if by `%#x' or `%#lx').

	DOU     The long int argument is converted to signed decimal, unsigned octal, or unsigned decimal, as if the format had been ld, lo, or lu respectively.
             These conversion characters are deprecated, and will eventually disappear.

	diouxX  The int (or appropriate variant) argument is converted to signed decimal (d and i), unsigned octal (o), unsigned decimal (u), or unsigned hexadecimal
             (x and X) notation.  The letters ``abcdef'' are used for x conversions; the letters ``ABCDEF'' are used for X conversions.  The precision, if any,
             gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.

	C       Treated as c with the l (ell) modifier.

    c       The int argument is converted to an unsigned char, and the resulting character is written.

             If the l (ell) modifier is used, the wint_t argument shall be converted to a wchar_t, and the (potentially multi-byte) sequence representing the sin-
             gle wide character is written, including any shift sequences.  If a shift sequence is used, the shift state is also restored to the original state
             after the character.

	eE      The double argument is rounded and converted in the style [-]d.ddde+-dd where there is one digit before the decimal-point character and the number of
             digits after it is equal to the precision; if the precision is missing, it is taken as 6; if the precision is zero, no decimal-point character
             appears.  An E conversion uses the letter `E' (rather than `e') to introduce the exponent.  The exponent always contains at least two digits; if the
             value is zero, the exponent is 00.

             For a, A, e, E, f, F, g, and G conversions, positive and negative infinity are represented as inf and -inf respectively when using the lowercase con-
             version character, and INF and -INF respectively when using the uppercase conversion character.  Similarly, NaN is represented as nan when using the
             lowercase conversion, and NAN when using the uppercase conversion.

     fF      The double argument is rounded and converted to decimal notation in the style [-]ddd.ddd, where the number of digits after the decimal-point charac-
             ter is equal to the precision specification.  If the precision is missing, it is taken as 6; if the precision is explicitly zero, no decimal-point
             character appears.  If a decimal point appears, at least one digit appears before it.

     gG      The double argument is converted in style f or e (or F or E for G conversions).  The precision specifies the number of significant digits.  If the
             precision is missing, 6 digits are given; if the precision is zero, it is treated as 1.  Style e is used if the exponent from its conversion is less
             than -4 or greater than or equal to the precision.  Trailing zeros are removed from the fractional part of the result; a decimal point appears only
             if it is followed by at least one digit.

     aA      The double argument is rounded and converted to hexadecimal notation in the style [-]0xh.hhhp[+-]d, where the number of digits after the hexadecimal-
             point character is equal to the precision specification.  If the precision is missing, it is taken as enough to represent the floating-point number
             exactly, and no rounding occurs.  If the precision is zero, no hexadecimal-point character appears.  The p is a literal character `p', and the expo-
             nent consists of a positive or negative sign followed by a decimal number representing an exponent of 2.  The A conversion uses the prefix ``0X''
             (rather than ``0x''), the letters ``ABCDEF'' (rather than ``abcdef'') to represent the hex digits, and the letter `P' (rather than `p') to separate
             the mantissa and exponent.

             Note that there may be multiple valid ways to represent floating-point numbers in this hexadecimal format.  For example, 0x1.92p+1, 0x3.24p+0,
             0x6.48p-1, and 0xc.9p-2 are all equivalent.  The format chosen depends on the internal representation of the number, but the implementation guaran-
             tees that the length of the mantissa will be minimized.  Zeroes are always represented with a mantissa of 0 (preceded by a `-' if appropriate) and an
             exponent of +0.

     n       The number of characters written so far is stored into the integer indicated by the int * (or variant) pointer argument.  No argument is converted.

	 b		 print in binary

	 r		 print a string of nonprintable characters

	 k		 print a date in any ordinary ISO format etc.

colors
	changes the {*name of color*} to it's sequence

fprintf sprintf
	fprintf takes fd as a 1st argument, and prints the result there
	sprintf takes a pointer to char, makes the resulting string a puts it into that * char
return lenght
	printf returns the number of characters it printed
